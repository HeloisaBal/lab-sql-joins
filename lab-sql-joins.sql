# LAB | SQL Joins #

-- 1.List the number of films per category.

SELECT c.name, COUNT(fc.category_id)
FROM film_category fc
JOIN category c 
USING (category_id)
GROUP BY category_id;


-- 2.Retrieve the store ID, city, and country for each store.

SELECT s.store_id, c.city, ct.country
FROM sakila.store s JOIN sakila.address a USING (address_id)
JOIN sakila.city c USING (city_id)
JOIN sakila.country ct USING (country_id);



-- 3.Calculate the total revenue generated by each store in dollars.
-- Why the difference?
SELECT SUM(p.amount) AS 'Total Revenue', s.store_id
FROM sakila.payment p JOIN sakila.staff s USING(staff_id)
GROUP BY s.store_id;

SELECT c.store_id, SUM(p.amount) AS total_revenue
FROM sakila.customer c
JOIN sakila.payment p USING (customer_id)
GROUP BY c.store_id;


-- 4.Determine the average running time of films for each category.

SELECT c.name AS category_name, ROUND(AVG(f.length)) AS avg_length
FROM sakila.film f JOIN sakila.film_category fc USING (film_id)
JOIN sakila.category c using(category_id)
GROUP BY c.name;


-- 5.Identify the film categories with the longest average running time.

SELECT ROUND(AVG (f.length)) AS longest_avg_running_time, c.name AS category_name
FROM sakila.film f JOIN film_category fc USING (film_id)
JOIN sakila.category c USING (category_id)
GROUP BY category_id
ORDER BY longest_avg_running_time DESC
LIMIT 5;




-- 6.Display the top 10 most frequently rented movies in descending order.

SELECT f.title AS 'Top 10 Most Rented Movies', COUNT(i.inventory_id) AS 'Count Of Rented Movies'
FROM sakila.film f JOIN sakila.inventory i USING (film_id)
JOIN rental r USING (inventory_id)
GROUP BY title
ORDER BY COUNT(i.inventory_id) DESC
LIMIT 10;




-- 7.Determine if "Academy Dinosaur" can be rented from Store 1.alter

SELECT title, inventory_id
FROM sakila.film f JOIN sakila.inventory i USING(film_id)
WHERE f.title = 'Academy Dinosaur' AND i.inventory_id = 1;



-- 8.  List of ALL film titles and if they are available in inventory.
SELECT * FROM inventory;


SELECT COUNT(film_id) FROM sakila.film;
SELECT COUNT(DISTINCT film_id) FROM sakila.inventory; -- 958 unique movies


SELECT DISTINCT f.title AS film_title,
CASE WHEN i.store_id IS NULL THEN 'not available'
ELSE 'available'
END AS film_availability -- new column
FROM sakila.film f
LEFT JOIN sakila.inventory i USING (film_id);












